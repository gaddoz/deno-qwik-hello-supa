/**
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * OpenAPI spec version: 11.2.0 (c820efb)
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DivisionsApi", () => {
  let instance: api.DivisionsApi
  beforeEach(function() {
    instance = new api.DivisionsApi(config)
  });

  test("divisionsDelete", () => {
    const id: string = "id_example"
    const createdAt: string = "createdAt_example"
    const sportId: string = "sportId_example"
    const name: string = "name_example"
    const prefer: string = "prefer_example"
    return expect(instance.divisionsDelete(id, createdAt, sportId, name, prefer, {})).resolves.toBe(null)
  })
  test("divisionsGet", () => {
    const id: string = "id_example"
    const createdAt: string = "createdAt_example"
    const sportId: string = "sportId_example"
    const name: string = "name_example"
    const select: string = "select_example"
    const order: string = "order_example"
    const range: string = "range_example"
    const rangeUnit: string = "rangeUnit_example"
    const offset: string = "offset_example"
    const limit: string = "limit_example"
    const prefer: string = "prefer_example"
    return expect(instance.divisionsGet(id, createdAt, sportId, name, select, order, range, rangeUnit, offset, limit, prefer, {})).resolves.toBe(null)
  })
  test("divisionsPatch", () => {
    const body: api.Divisions = undefined
    const prefer: string = "prefer_example"
    const id: string = "id_example"
    const createdAt: string = "createdAt_example"
    const sportId: string = "sportId_example"
    const name: string = "name_example"
    return expect(instance.divisionsPatch(body, prefer, id, createdAt, sportId, name, {})).resolves.toBe(null)
  })
  test("divisionsPost", () => {
    const body: api.Divisions = undefined
    const prefer: string = "prefer_example"
    const select: string = "select_example"
    return expect(instance.divisionsPost(body, prefer, select, {})).resolves.toBe(null)
  })
})

describe("EventFormatDivisionsApi", () => {
  let instance: api.EventFormatDivisionsApi
  beforeEach(function() {
    instance = new api.EventFormatDivisionsApi(config)
  });

  test("eventFormatDivisionsDelete", () => {
    const id: string = "id_example"
    const sportId: string = "sportId_example"
    const formatId: string = "formatId_example"
    const divisionId: string = "divisionId_example"
    const enabled: string = "enabled_example"
    const createdAt: string = "createdAt_example"
    const prefer: string = "prefer_example"
    return expect(instance.eventFormatDivisionsDelete(id, sportId, formatId, divisionId, enabled, createdAt, prefer, {})).resolves.toBe(null)
  })
  test("eventFormatDivisionsGet", () => {
    const id: string = "id_example"
    const sportId: string = "sportId_example"
    const formatId: string = "formatId_example"
    const divisionId: string = "divisionId_example"
    const enabled: string = "enabled_example"
    const createdAt: string = "createdAt_example"
    const select: string = "select_example"
    const order: string = "order_example"
    const range: string = "range_example"
    const rangeUnit: string = "rangeUnit_example"
    const offset: string = "offset_example"
    const limit: string = "limit_example"
    const prefer: string = "prefer_example"
    return expect(instance.eventFormatDivisionsGet(id, sportId, formatId, divisionId, enabled, createdAt, select, order, range, rangeUnit, offset, limit, prefer, {})).resolves.toBe(null)
  })
  test("eventFormatDivisionsPatch", () => {
    const body: api.EventFormatDivisions = undefined
    const prefer: string = "prefer_example"
    const id: string = "id_example"
    const sportId: string = "sportId_example"
    const formatId: string = "formatId_example"
    const divisionId: string = "divisionId_example"
    const enabled: string = "enabled_example"
    const createdAt: string = "createdAt_example"
    return expect(instance.eventFormatDivisionsPatch(body, prefer, id, sportId, formatId, divisionId, enabled, createdAt, {})).resolves.toBe(null)
  })
  test("eventFormatDivisionsPost", () => {
    const body: api.EventFormatDivisions = undefined
    const prefer: string = "prefer_example"
    const select: string = "select_example"
    return expect(instance.eventFormatDivisionsPost(body, prefer, select, {})).resolves.toBe(null)
  })
})

describe("EventsApi", () => {
  let instance: api.EventsApi
  beforeEach(function() {
    instance = new api.EventsApi(config)
  });

  test("eventsDelete", () => {
    const id: string = "id_example"
    const createdAt: string = "createdAt_example"
    const ownerId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const title: string = "title_example"
    const description: string = "description_example"
    const publicListing: string = "publicListing_example"
    const registrationOpen: string = "registrationOpen_example"
    const registrationClose: string = "registrationClose_example"
    const eventStart: string = "eventStart_example"
    const eventEnd: string = "eventEnd_example"
    const registrationEnabled: string = "registrationEnabled_example"
    const eventLocation: string = "eventLocation_example"
    const slug: string = "slug_example"
    const _public: string = "_public_example"
    const prefer: string = "prefer_example"
    return expect(instance.eventsDelete(id, createdAt, ownerId, title, description, publicListing, registrationOpen, registrationClose, eventStart, eventEnd, registrationEnabled, eventLocation, slug, _public, prefer, {})).resolves.toBe(null)
  })
  test("eventsGet", () => {
    const id: string = "id_example"
    const createdAt: string = "createdAt_example"
    const ownerId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const title: string = "title_example"
    const description: string = "description_example"
    const publicListing: string = "publicListing_example"
    const registrationOpen: string = "registrationOpen_example"
    const registrationClose: string = "registrationClose_example"
    const eventStart: string = "eventStart_example"
    const eventEnd: string = "eventEnd_example"
    const registrationEnabled: string = "registrationEnabled_example"
    const eventLocation: string = "eventLocation_example"
    const slug: string = "slug_example"
    const _public: string = "_public_example"
    const select: string = "select_example"
    const order: string = "order_example"
    const range: string = "range_example"
    const rangeUnit: string = "rangeUnit_example"
    const offset: string = "offset_example"
    const limit: string = "limit_example"
    const prefer: string = "prefer_example"
    return expect(instance.eventsGet(id, createdAt, ownerId, title, description, publicListing, registrationOpen, registrationClose, eventStart, eventEnd, registrationEnabled, eventLocation, slug, _public, select, order, range, rangeUnit, offset, limit, prefer, {})).resolves.toBe(null)
  })
  test("eventsPatch", () => {
    const body: api.Events = undefined
    const prefer: string = "prefer_example"
    const id: string = "id_example"
    const createdAt: string = "createdAt_example"
    const ownerId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const title: string = "title_example"
    const description: string = "description_example"
    const publicListing: string = "publicListing_example"
    const registrationOpen: string = "registrationOpen_example"
    const registrationClose: string = "registrationClose_example"
    const eventStart: string = "eventStart_example"
    const eventEnd: string = "eventEnd_example"
    const registrationEnabled: string = "registrationEnabled_example"
    const eventLocation: string = "eventLocation_example"
    const slug: string = "slug_example"
    const _public: string = "_public_example"
    return expect(instance.eventsPatch(body, prefer, id, createdAt, ownerId, title, description, publicListing, registrationOpen, registrationClose, eventStart, eventEnd, registrationEnabled, eventLocation, slug, _public, {})).resolves.toBe(null)
  })
  test("eventsPost", () => {
    const body: api.Events = undefined
    const prefer: string = "prefer_example"
    const select: string = "select_example"
    return expect(instance.eventsPost(body, prefer, select, {})).resolves.toBe(null)
  })
})

describe("EventsRegistrationsApi", () => {
  let instance: api.EventsRegistrationsApi
  beforeEach(function() {
    instance = new api.EventsRegistrationsApi(config)
  });

  test("eventsRegistrationsDelete", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const eventId: string = "eventId_example"
    const playerFirstname: string = "playerFirstname_example"
    const playerLastname: string = "playerLastname_example"
    const playerEmail: string = "playerEmail_example"
    const playerCountry: string = "playerCountry_example"
    const playerDinner: string = "playerDinner_example"
    const playerDivision: string = "playerDivision_example"
    const playerCategories: string = "playerCategories_example"
    const createdAt: string = "createdAt_example"
    const modifiedAt: string = "modifiedAt_example"
    const playerPhone: string = "playerPhone_example"
    const playerMusic: string = "playerMusic_example"
    const playerDogAge: string = "playerDogAge_example"
    const playerDogName: string = "playerDogName_example"
    const prefer: string = "prefer_example"
    return expect(instance.eventsRegistrationsDelete(id, eventId, playerFirstname, playerLastname, playerEmail, playerCountry, playerDinner, playerDivision, playerCategories, createdAt, modifiedAt, playerPhone, playerMusic, playerDogAge, playerDogName, prefer, {})).resolves.toBe(null)
  })
  test("eventsRegistrationsGet", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const eventId: string = "eventId_example"
    const playerFirstname: string = "playerFirstname_example"
    const playerLastname: string = "playerLastname_example"
    const playerEmail: string = "playerEmail_example"
    const playerCountry: string = "playerCountry_example"
    const playerDinner: string = "playerDinner_example"
    const playerDivision: string = "playerDivision_example"
    const playerCategories: string = "playerCategories_example"
    const createdAt: string = "createdAt_example"
    const modifiedAt: string = "modifiedAt_example"
    const playerPhone: string = "playerPhone_example"
    const playerMusic: string = "playerMusic_example"
    const playerDogAge: string = "playerDogAge_example"
    const playerDogName: string = "playerDogName_example"
    const select: string = "select_example"
    const order: string = "order_example"
    const range: string = "range_example"
    const rangeUnit: string = "rangeUnit_example"
    const offset: string = "offset_example"
    const limit: string = "limit_example"
    const prefer: string = "prefer_example"
    return expect(instance.eventsRegistrationsGet(id, eventId, playerFirstname, playerLastname, playerEmail, playerCountry, playerDinner, playerDivision, playerCategories, createdAt, modifiedAt, playerPhone, playerMusic, playerDogAge, playerDogName, select, order, range, rangeUnit, offset, limit, prefer, {})).resolves.toBe(null)
  })
  test("eventsRegistrationsPatch", () => {
    const body: api.EventsRegistrations = undefined
    const prefer: string = "prefer_example"
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const eventId: string = "eventId_example"
    const playerFirstname: string = "playerFirstname_example"
    const playerLastname: string = "playerLastname_example"
    const playerEmail: string = "playerEmail_example"
    const playerCountry: string = "playerCountry_example"
    const playerDinner: string = "playerDinner_example"
    const playerDivision: string = "playerDivision_example"
    const playerCategories: string = "playerCategories_example"
    const createdAt: string = "createdAt_example"
    const modifiedAt: string = "modifiedAt_example"
    const playerPhone: string = "playerPhone_example"
    const playerMusic: string = "playerMusic_example"
    const playerDogAge: string = "playerDogAge_example"
    const playerDogName: string = "playerDogName_example"
    return expect(instance.eventsRegistrationsPatch(body, prefer, id, eventId, playerFirstname, playerLastname, playerEmail, playerCountry, playerDinner, playerDivision, playerCategories, createdAt, modifiedAt, playerPhone, playerMusic, playerDogAge, playerDogName, {})).resolves.toBe(null)
  })
  test("eventsRegistrationsPost", () => {
    const body: api.EventsRegistrations = undefined
    const prefer: string = "prefer_example"
    const select: string = "select_example"
    return expect(instance.eventsRegistrationsPost(body, prefer, select, {})).resolves.toBe(null)
  })
})

describe("FormatsApi", () => {
  let instance: api.FormatsApi
  beforeEach(function() {
    instance = new api.FormatsApi(config)
  });

  test("formatsDelete", () => {
    const id: string = "id_example"
    const name: string = "name_example"
    const sportId: string = "sportId_example"
    const createdAt: string = "createdAt_example"
    const prefer: string = "prefer_example"
    return expect(instance.formatsDelete(id, name, sportId, createdAt, prefer, {})).resolves.toBe(null)
  })
  test("formatsGet", () => {
    const id: string = "id_example"
    const name: string = "name_example"
    const sportId: string = "sportId_example"
    const createdAt: string = "createdAt_example"
    const select: string = "select_example"
    const order: string = "order_example"
    const range: string = "range_example"
    const rangeUnit: string = "rangeUnit_example"
    const offset: string = "offset_example"
    const limit: string = "limit_example"
    const prefer: string = "prefer_example"
    return expect(instance.formatsGet(id, name, sportId, createdAt, select, order, range, rangeUnit, offset, limit, prefer, {})).resolves.toBe(null)
  })
  test("formatsPatch", () => {
    const body: api.Formats = undefined
    const prefer: string = "prefer_example"
    const id: string = "id_example"
    const name: string = "name_example"
    const sportId: string = "sportId_example"
    const createdAt: string = "createdAt_example"
    return expect(instance.formatsPatch(body, prefer, id, name, sportId, createdAt, {})).resolves.toBe(null)
  })
  test("formatsPost", () => {
    const body: api.Formats = undefined
    const prefer: string = "prefer_example"
    const select: string = "select_example"
    return expect(instance.formatsPost(body, prefer, select, {})).resolves.toBe(null)
  })
})

describe("IntrospectionApi", () => {
  let instance: api.IntrospectionApi
  beforeEach(function() {
    instance = new api.IntrospectionApi(config)
  });

  test("rootGet", () => {
    return expect(instance.rootGet({})).resolves.toBe(null)
  })
})

describe("ProfilesApi", () => {
  let instance: api.ProfilesApi
  beforeEach(function() {
    instance = new api.ProfilesApi(config)
  });

  test("profilesDelete", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const updatedAt: string = "updatedAt_example"
    const username: string = "username_example"
    const fullName: string = "fullName_example"
    const avatarUrl: string = "avatarUrl_example"
    const website: string = "website_example"
    const prefer: string = "prefer_example"
    return expect(instance.profilesDelete(id, updatedAt, username, fullName, avatarUrl, website, prefer, {})).resolves.toBe(null)
  })
  test("profilesGet", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const updatedAt: string = "updatedAt_example"
    const username: string = "username_example"
    const fullName: string = "fullName_example"
    const avatarUrl: string = "avatarUrl_example"
    const website: string = "website_example"
    const select: string = "select_example"
    const order: string = "order_example"
    const range: string = "range_example"
    const rangeUnit: string = "rangeUnit_example"
    const offset: string = "offset_example"
    const limit: string = "limit_example"
    const prefer: string = "prefer_example"
    return expect(instance.profilesGet(id, updatedAt, username, fullName, avatarUrl, website, select, order, range, rangeUnit, offset, limit, prefer, {})).resolves.toBe(null)
  })
  test("profilesPatch", () => {
    const body: api.Profiles = undefined
    const prefer: string = "prefer_example"
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const updatedAt: string = "updatedAt_example"
    const username: string = "username_example"
    const fullName: string = "fullName_example"
    const avatarUrl: string = "avatarUrl_example"
    const website: string = "website_example"
    return expect(instance.profilesPatch(body, prefer, id, updatedAt, username, fullName, avatarUrl, website, {})).resolves.toBe(null)
  })
  test("profilesPost", () => {
    const body: api.Profiles = undefined
    const prefer: string = "prefer_example"
    const select: string = "select_example"
    return expect(instance.profilesPost(body, prefer, select, {})).resolves.toBe(null)
  })
})

describe("RpcDeleteAvatarApi", () => {
  let instance: api.RpcDeleteAvatarApi
  beforeEach(function() {
    instance = new api.RpcDeleteAvatarApi(config)
  });

  test("rpcDeleteAvatarGet", () => {
    const avatarUrl: string = "avatarUrl_example"
    return expect(instance.rpcDeleteAvatarGet(avatarUrl, {})).resolves.toBe(null)
  })
  test("rpcDeleteAvatarPost", () => {
    const body: api.RpcDeleteAvatarBody = undefined
    const prefer: string = "prefer_example"
    return expect(instance.rpcDeleteAvatarPost(body, prefer, {})).resolves.toBe(null)
  })
})

describe("RpcDeleteStorageObjectApi", () => {
  let instance: api.RpcDeleteStorageObjectApi
  beforeEach(function() {
    instance = new api.RpcDeleteStorageObjectApi(config)
  });

  test("rpcDeleteStorageObjectGet", () => {
    const bucket: string = "bucket_example"
    const object: string = "object_example"
    return expect(instance.rpcDeleteStorageObjectGet(bucket, object, {})).resolves.toBe(null)
  })
  test("rpcDeleteStorageObjectPost", () => {
    const body: api.RpcDeleteStorageObjectBody = undefined
    const prefer: string = "prefer_example"
    return expect(instance.rpcDeleteStorageObjectPost(body, prefer, {})).resolves.toBe(null)
  })
})

describe("SportsApi", () => {
  let instance: api.SportsApi
  beforeEach(function() {
    instance = new api.SportsApi(config)
  });

  test("sportsDelete", () => {
    const id: string = "id_example"
    const name: string = "name_example"
    const createdAt: string = "createdAt_example"
    const prefer: string = "prefer_example"
    return expect(instance.sportsDelete(id, name, createdAt, prefer, {})).resolves.toBe(null)
  })
  test("sportsGet", () => {
    const id: string = "id_example"
    const name: string = "name_example"
    const createdAt: string = "createdAt_example"
    const select: string = "select_example"
    const order: string = "order_example"
    const range: string = "range_example"
    const rangeUnit: string = "rangeUnit_example"
    const offset: string = "offset_example"
    const limit: string = "limit_example"
    const prefer: string = "prefer_example"
    return expect(instance.sportsGet(id, name, createdAt, select, order, range, rangeUnit, offset, limit, prefer, {})).resolves.toBe(null)
  })
  test("sportsPatch", () => {
    const body: api.Sports = undefined
    const prefer: string = "prefer_example"
    const id: string = "id_example"
    const name: string = "name_example"
    const createdAt: string = "createdAt_example"
    return expect(instance.sportsPatch(body, prefer, id, name, createdAt, {})).resolves.toBe(null)
  })
  test("sportsPost", () => {
    const body: api.Sports = undefined
    const prefer: string = "prefer_example"
    const select: string = "select_example"
    return expect(instance.sportsPost(body, prefer, select, {})).resolves.toBe(null)
  })
})

describe("TodosApi", () => {
  let instance: api.TodosApi
  beforeEach(function() {
    instance = new api.TodosApi(config)
  });

  test("todosDelete", () => {
    const id: string = "id_example"
    const createdAt: string = "createdAt_example"
    const task: string = "task_example"
    const name: string = "name_example"
    const userId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const completed: string = "completed_example"
    const prefer: string = "prefer_example"
    return expect(instance.todosDelete(id, createdAt, task, name, userId, completed, prefer, {})).resolves.toBe(null)
  })
  test("todosGet", () => {
    const id: string = "id_example"
    const createdAt: string = "createdAt_example"
    const task: string = "task_example"
    const name: string = "name_example"
    const userId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const completed: string = "completed_example"
    const select: string = "select_example"
    const order: string = "order_example"
    const range: string = "range_example"
    const rangeUnit: string = "rangeUnit_example"
    const offset: string = "offset_example"
    const limit: string = "limit_example"
    const prefer: string = "prefer_example"
    return expect(instance.todosGet(id, createdAt, task, name, userId, completed, select, order, range, rangeUnit, offset, limit, prefer, {})).resolves.toBe(null)
  })
  test("todosPatch", () => {
    const body: api.Todos = undefined
    const prefer: string = "prefer_example"
    const id: string = "id_example"
    const createdAt: string = "createdAt_example"
    const task: string = "task_example"
    const name: string = "name_example"
    const userId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const completed: string = "completed_example"
    return expect(instance.todosPatch(body, prefer, id, createdAt, task, name, userId, completed, {})).resolves.toBe(null)
  })
  test("todosPost", () => {
    const body: api.Todos = undefined
    const prefer: string = "prefer_example"
    const select: string = "select_example"
    return expect(instance.todosPost(body, prefer, select, {})).resolves.toBe(null)
  })
})

